// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "UObject/NoExportTypes.h"
#include "GameplayTagContainer.h"
#include "DialogueContext.generated.h"

// Forward declarations
class AActor;
class UDialogueNode;

/**
 * ????? ?????????
 */
USTRUCT(BlueprintType)
struct DIALOGUESYSTEMCORE_API FConversationEntry
{
    GENERATED_BODY()

    /** ??? ?????????? */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Conversation")
    FText SpeakerName;

    /** ????? ??????? */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Conversation")
    FText DialogueText;

    /** ????????? ??????? */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Conversation")
    FDateTime Timestamp;

    /** ID ???? */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Conversation")
    FName NodeId;

    FConversationEntry()
        : SpeakerName(FText::GetEmpty())
        , DialogueText(FText::GetEmpty())
        , Timestamp(FDateTime::Now())
        , NodeId(NAME_None)
    {}
};

/**
 * ???????? ???? ??????? (??????)
 * 
 * ???????????? ??? Condition/Effect ????????????
 * ????????:
 * - Player/NPC references
 * - Relationship data
 * - Quest state
 * - Inventory
 * - ??? ????????? ?????????
 * - ??????? ?????????
 */
UCLASS(BlueprintType)
class DIALOGUESYSTEMCORE_API UDialogueSessionContext : public UObject
{
    GENERATED_BODY()

public:
    //~ Begin Participants

    /** Игрок */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Context")
    TObjectPtr<AActor> Player;

    /** NPC */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Context")
    TObjectPtr<AActor> NPC;

    //~ End Participants

    //~ Begin Relationship

    /** Начальное значение аффинности перед диалогом */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Context")
    float BaseAffinityLevel = 0.0f;

    //~ End Relationship

    //~ Begin Conversation State

    /** ??????? ?????????? ???? */
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Context")
    TWeakObjectPtr<UDialogueNode> CurrentNode;

    /** ??????? ???????? */
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Context")
    TArray<FConversationEntry> ConversationHistory;

    /** ????????? ???? (??? ?????? ??????) */
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Context")
    TArray<FName> VisitedNodes;

    /** ??????? ??????? */
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Context")
    FDateTime SessionStartTime;

    //~ End Conversation State

    //~ Begin Custom Variables

    /** ???????????? ?????????? (??? Conditions/Effects) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Context")
    TMap<FName, FString> CustomVariables;

    /** ????, ????????????? ?? ????? ??????? */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Context")
    FGameplayTagContainer ActiveTags;

    //~ End Custom Variables

public:
    //~ Begin UObject Interface
    virtual void BeginDestroy() override;
    //~ End UObject Interface

    //~ Begin Public API

    /** ???????? ???????????? ?????????? */
    UFUNCTION(BlueprintPure, Category = "Context")
    FString GetCustomVariable(FName VariableName, const FString& DefaultValue = TEXT("")) const;

    /** ?????????? ???????????? ?????????? */
    UFUNCTION(BlueprintCallable, Category = "Context")
    void SetCustomVariable(FName VariableName, const FString& Value);

    /** ???????? ??? */
    UFUNCTION(BlueprintCallable, Category = "Context")
    void AddTag(FGameplayTag Tag);

    /** ??????? ??? */
    UFUNCTION(BlueprintCallable, Category = "Context")
    void RemoveTag(FGameplayTag Tag);

    /** ????????? ??????? ???? */
    UFUNCTION(BlueprintPure, Category = "Context")
    bool HasTag(FGameplayTag Tag) const;

    /** ???????? ? ??????? */
    UFUNCTION(BlueprintCallable, Category = "Context")
    void AddToHistory(const FText& SpeakerName, const FText& DialogueText, FName NodeId);

    /** ???????? ?????????? ???? */
    UFUNCTION(BlueprintCallable, Category = "Context")
    void MarkNodeVisited(FName NodeId);

    /** ???????? ???? ??? ???????? */
    UFUNCTION(BlueprintPure, Category = "Context")
    bool WasNodeVisited(FName NodeId) const;

    /** ???????????? */
    UFUNCTION(BlueprintCallable, Category = "Context")
    void SaveToJson(FString& OutJson) const;

    UFUNCTION(BlueprintCallable, Category = "Context")
    bool LoadFromJson(const FString& Json);

    //~ End Public API
};
